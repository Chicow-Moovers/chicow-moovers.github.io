/* 
 * I just learned about variables in CSS!
 * https://medium.com/@mwichary/dark-theme-in-a-day-3518dde2955a 
 *
 * The syntax is a little strange...
 * All variables start with two dashes (e.g. --foo).
 * 
 * Say I wanted to set --foo to 2px.
 * I could do this:
 *
 * body
 * {
 *  --foo: 2px;
 * }
 *
 * Then, in anything inside of the body, like a div,
 * (when writing rules)
 * I can use this variable.
 *
 * For example, 
 *
 * span
 * {
 *  font-size: var(--foo);
 * }
 *
 * Another example:
 *
 * body
 * {
 *  --main-color: red;
 * }
 *
 * div
 * {
 *  background-color: var(--main-color);
 *  box-shadow: 0px 0px 3px var(--main-color); // Shadow with color --main-color
 * }
 *
 * body > div // A div that is a direct child of the body. E.g. (<body><DIV></DIV>...</div>)
 * {
 *  color: var(--main-color);
 * }
 */

@keyframes grow-in
{
    0% { transform: scale(1, 0); transform-origin: top; }
    100% { transform: scale(1, 1); transform-origin: top; }
}

@keyframes shrink-out
{
    0% { transform: scale(1, 1); transform-origin: top; max-height: 100vh; opacity: 1; }
    100% { transform: scale(1, 0); transform-origin: top; max-height: 0vh; opacity: 0; }
}

@keyframes grow-in-left
{
    0% { transform: scale(0, 1); transform-origin: left; }
    100% { transform: scale(1, 1); transform-origin: left; }
}

/**
 * The `:root` query-selector is almost the same thing as the 
 * `html` query-selector. The difference is that rules defined for 
 * `:root` override those defined using the `html` selector.
 *
 * In other words, `:root` is considered "more specific" than `html`.
 */
:root
{
    /* Define "light-mode" variables. :) */
    --main-bg-color: rgba(200, 200, 200, 1.0);
    --main-fg-color: rgba(0, 0, 0, 1.0);

    --background-bg-color: rgba(100, 100, 100, 1.0);
    --background-fg-color: rgba(150, 150, 150, 1.0);

    /* 
     * Some images need inverting when we're in dark mode. We can 
     * do this by saying that images that should be inverted in light mode should
     * have a `filter: invert(percent here)`, etc.
     */
    --main-inverted-value: 100%;
    --main-uninverted-value: 0%;

    /*
     * Calculate this based on the width & height of the screen.
     * This way, devices with narrow screens have bigger icons, as these
     * are probably mobile phones.
     *
     * I'm **sure** that there is a better way to do this...
     */
    --action-button-size: calc(min(max(4vh - 2vw, 10px), 40px));
}

/* 
 * When `<html data-theme="dark">` is what the html element looks like...
 *
 * (Set this using 
 *   var html = document.querySelector(':root'); // or 'html'
 *   html.setAttribute('data-theme', 'dark');
 * )
 */
:root[data-theme="dark"]
{
    --main-bg-color: rgba(50, 50, 50, 1.0);
    --main-fg-color: rgba(200, 200, 200, 1.0);

    --background-bg-color: rgba(10, 10, 10, 1.0);
    --background-fg-color: rgba(30, 30, 30, 1.0);

    --main-inverted-value: 0%;
    --main-uninverted-value: 100%;
}

/* 
 * Please see https://medium.com/@mwichary/dark-theme-in-a-day-3518dde2955a 
 *
 * This provides a smooth transition between dark and light themes.
 * Clicking on the theme-change button causes JavaScript to `.add`
 * the class `transitioning-color-scheme` to the `classList` of 
 * `:root` (which is, of course, the `<html>...</html>` element).
 */
:root.transitioning-color-theme *,
    :root.transitioning-color-theme *::before,
    :root.transitioning-color-theme *::after
{
    transition: 0.8s ease all !important; /* Transition EVERYTHING. */
}

/* The change-theme floating button. */
#changeTheme
{

    padding: var(--action-button-size); /* Get the value of the variable --action-button-size */

    margin-left: auto; /* Push to the right. */
    margin-right: 6px;
    
    display: block;    /* LET US move it to the right using margin-left: auto. */

    border: none;        /* No border. */
    border-radius: 100%; /* Completely circular */

    cursor: pointer;

    background-color: rgba(255, 255, 255, 0.5);
    background-image: url(../ui/themeSwitch.svg);
    background-size: 100% 100%;

    filter: invert(var(--main-uninverted-value)); /* We will animate this! */
    transform: rotate(1deg);

    box-shadow: -2px 0px 4px rgba(150, 150, 150, 0.5);

    transition: filter 0.5s ease, transform 0.25s ease; /* Animate changes to filter & transform! */
}

/* Visual effect when hovering over the theme changer: */
#changeTheme:hover
{
    filter: invert(var(--main-inverted-value)); /* Invert its colors (again?)! */
    transform: rotate(14deg); /* Rotate it 14 degrees, too! */
}

main
{
    background-color: var(--main-bg-color);
    color: var(--main-fg-color);

    box-shadow: 2px 0px 3px rgba(100, 100, 100, 0.8);

    max-width: 600px;

    margin-left: auto;
    margin-right: auto;

    margin-top: 40px;
    margin-bottom: 35px;

    padding: 12pt;
}

.spacing
{
    flex-grow: 1;
    flex-shrink: 1;
}

.spacer
{
    flex-grow: 50;
    flex-shrink: 50;
}

header .icon
{
    background-image: url(../ui/favicon.svg);
    background-size: 100% 100%;
    background-clip: border-box;

    width: var(--header-height);
    border-radius: 10%;
    flex-grow: 0;
    flex-shrink: 0;
}

header .title
{
    margin-left: 12px;
    text-shadow: 0px 1px 8px rgba(255, 255, 255, 0.9);
}

header
{
    --header-height: calc(4 * var(--action-button-size));
    background-color: var(--background-fg-color);
    box-shadow: 0px 3px 2px rgba(100, 100, 100, 0.6);
    display: flex;

    min-height: var(--header-height);
    
    flex-direction: row;
    align-items: stretch;

    font-family: sans;
    font-size: calc(0.8*var(--header-height));

    color: var(--main-fg-color);
}

body, html
{
    margin: 0;
}

body
{
    background-color: var(--background-bg-color);
    background-image: radial-gradient(var(--background-fg-color), rgba(0, 0, 0, 0.0));
    background-size: 5px 5px;

    font-family: sans;
}

details > summary
{
    cursor: pointer;
    transition: text-shadow 0.5s ease;

    font-size: 200%;
}

details > summary:hover, details > summary:active
{
    text-shadow: 0px 0px 4px var(--background-bg-color);
}

details[open] > :nth-child(2)
{
    animation: 0.5s ease grow-in;
}

details:not([open])
{
    animation: 0.1s ease grow-in-left;
}

@media screen and (max-width: 460px)
{
    /*
     * Should we set --action-button-size here
     * for mobile devices? It might be nicer than 
     * what we do right now...
     *
     * E.g.
     * :root
     * {
     *  --action-button-size: something;
     * }
     *
     * because this is where we apply mobile styling.
     */

    main
    {
        transform: scale(1, 1);
        margin-top: 15px;
        margin-bottom: 5px;
    }
}

/* Is the page being printed? */
@media print
{
    main
    {
        box-shadow: none;
        max-width: none;
        margin-left: inherit;
        margin-right: inherit;
    }
    
    #changeTheme
    {
        display: none;
    }
}
